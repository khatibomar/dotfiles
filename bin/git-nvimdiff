#!/usr/bin/env bash

# Enhanced nvimdiff wrapper for Git
# Provides better UI and accuracy for Git operations

set -e

# Function to show usage
show_usage() {
    cat << EOF
Usage: git-nvimdiff [OPTIONS] <operation>

Operations:
  diff        - Show diff between files
  merge       - 3-way merge with LOCAL, BASE, REMOTE
  mergetool   - Interactive merge tool

Options:
  -h, --help  - Show this help message
  -v, --verbose - Verbose output

Environment variables used:
  LOCAL   - Local version of file (merge)
  BASE    - Common ancestor (merge)
  REMOTE  - Remote version of file (merge)
  MERGED  - Result file (merge)

EOF
}

# Enhanced nvim configuration for Git operations
setup_nvim_config() {
    cat << 'EOF'
" Enhanced Git diff/merge configuration
set diffopt=internal,filler,closeoff,hiddenoff,algorithm:patience
set diffopt+=linematch:60

" Better colors for diff
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red

" Merge conflict navigation
nnoremap <leader>co :diffget //2<CR>  " get from LOCAL (ours)
nnoremap <leader>ct :diffget //3<CR>  " get from REMOTE (theirs)
nnoremap <leader>cb :diffget //1<CR>  " get from BASE
nnoremap <leader>cc :diffupdate<CR>   " update diff
nnoremap ]c ]c                        " next diff
nnoremap [c [c                        " previous diff

" Save and quit shortcuts
nnoremap <leader>q :qa<CR>
nnoremap <leader>w :wa<CR>
nnoremap <leader>wq :wqa<CR>

" Show helpful message
echo "Git Merge Help:"
echo "  ]c / [c     - Navigate between conflicts"
echo "  <leader>co  - Choose LOCAL (ours)"
echo "  <leader>ct  - Choose REMOTE (theirs)"
echo "  <leader>cb  - Choose BASE"
echo "  <leader>cc  - Update diff"
echo "  <leader>w   - Save all"
echo "  <leader>q   - Quit all"
echo "  <leader>wq  - Save and quit"
EOF
}

# Main merge function
do_merge() {
    local local_file="$1"
    local base_file="$2"
    local remote_file="$3"
    local merged_file="$4"

    if [[ -z "$local_file" || -z "$base_file" || -z "$remote_file" || -z "$merged_file" ]]; then
        echo "Error: Missing required files for merge"
        echo "Usage: git-nvimdiff merge LOCAL BASE REMOTE MERGED"
        exit 1
    fi

    # Create temporary config
    local temp_config=$(mktemp)
    setup_nvim_config > "$temp_config"

    echo "Starting 3-way merge..."
    echo "Files:"
    echo "  LOCAL:  $local_file"
    echo "  BASE:   $base_file"
    echo "  REMOTE: $remote_file"
    echo "  MERGED: $merged_file"
    echo ""

    # Start nvim with 4-window layout
    nvim -u "$temp_config" \
        -c "set hidden" \
        -c "silent edit $merged_file" \
        -c "silent leftabove vsplit $local_file" \
        -c "silent rightbelow vsplit $remote_file" \
        -c "silent leftabove split $base_file" \
        -c "wincmd J" \
        -c "wincmd =" \
        -c "wincmd l" \
        "$merged_file"

    # Cleanup
    rm -f "$temp_config"

    # Check if merge was successful
    if git diff --check "$merged_file" 2>/dev/null; then
        echo "Merge completed successfully!"
    else
        echo "Warning: There may still be conflicts in $merged_file"
        echo "Please review and resolve manually if needed."
    fi
}

# Simple diff function
do_diff() {
    local file1="$1"
    local file2="$2"

    if [[ -z "$file1" || -z "$file2" ]]; then
        echo "Error: Need two files to diff"
        echo "Usage: git-nvimdiff diff FILE1 FILE2"
        exit 1
    fi

    echo "Comparing files:"
    echo "  $file1"
    echo "  $file2"

    nvim -d "$file1" "$file2" \
        -c "set diffopt+=linematch:60" \
        -c "wincmd ="
}

# Git mergetool integration
do_mergetool() {
    if [[ -n "$LOCAL" && -n "$BASE" && -n "$REMOTE" && -n "$MERGED" ]]; then
        do_merge "$LOCAL" "$BASE" "$REMOTE" "$MERGED"
    else
        echo "Error: This should be called by git mergetool"
        echo "Missing environment variables: LOCAL, BASE, REMOTE, MERGED"
        exit 1
    fi
}

# Parse command line arguments
VERBOSE=false
OPERATION=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        diff|merge|mergetool)
            OPERATION="$1"
            shift
            break
            ;;
        *)
            echo "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
done

# Execute the operation
case "$OPERATION" in
    diff)
        do_diff "$@"
        ;;
    merge)
        do_merge "$@"
        ;;
    mergetool)
        do_mergetool
        ;;
    *)
        echo "Error: No operation specified"
        show_usage
        exit 1
        ;;
esac
